<!DOCTYPE html>
<html>
<head>
    <base href="http://<%=req.headers.host%>/">
    <title>Epihack :: Platform Admin</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="styles/bootstrap.min.css">
    <link rel="stylesheet" href="styles/importer.css">
    <link rel="stylesheet" href="styles/simple-sidebar.css">
    <link rel="stylesheet" href="styles/styles.css">
    <!--STYLES END-->
  </head>

  <body>

   <%- partial('navbar.ejs') %>

   <%- body %>
   <div class="modal fade"
        id="add_symptom_modal">
       <div class="modal-dialog">
           <div class="modal-content">
               <div class="modal-header">
                   <button type="button"
                           class="close"
                           data-dismiss="modal"
                           aria-label="Close"><span aria-hidden="true">&times;</span></button>
                   <h4 class="modal-title">Add Symptom</h4>
               </div>
               <form action="/symptoms/create"
                     method="post">
               <div class="modal-body">
                       <input type="hidden"
                              name="client"
                              value="dashboard">
                   <input type="hidden"
                              name="redirect_to"
                              value="<%=req.url%>">
                       <div class="form-group">
                           <label for="symptom_name">Name</label>
                           <input type="text"
                                  name="name"
                                  class="form-control"
                                  id="symptom_name"
                                  placeholder="Symptom Name">
                       </div>
                       <div class="form-group">
                           <label for="symptom_code">Symptom Code</label>
                           <input type="text"
                                  name="code"
                                  class="form-control"
                                  id="symptom_code"
                                  placeholder="Symptom Code">
                           <p class="help-block">An unique code to identify this symptom.</p>
                       </div>
                       <div class="form-group checkbox">
                           <label>
                               <input type="checkbox" name="is_required"> Is required
                           </label>
                           <p class="help-block">Check if the symptom is always present in the disease.</p>
                       </div>
                       <div class="form-group">
                           <label for="symptom_priority">Priority</label>
                           <input type="text"
                                  name="priority"
                                  class="form-control"
                                  id="symptom_priority"
                                  value="0"
                                  placeholder="Symptom Priority">
                           <p class="help-block">A number indicating the priority this of this symptom when related to a disease. A higher value means the user presenting this symptom is more likely to have this disease.</p>
                       </div>

               </div>
               <div class="modal-footer">
                   <button type="submit"
                           class="btn btn-success">Save</button>
               </div>
               </form>
           </div><!-- /.modal-content -->
       </div><!-- /.modal-dialog -->
   </div><!-- /.modal -->




         <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

         <!--TEMPLATES-->

         <!--TEMPLATES END-->


         <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
   <script type="text/javascript"
           src='http://maps.google.com/maps/api/js?sensor=false&libraries=places'></script>
         <!--SCRIPTS-->
         <script src="js/dependencies/sails.io.js"></script>
         <script src="js/dependencies/jquery.js"></script>
         <script src="js/dependencies/bootstrap.min.js"></script>
         <script src="js/dependencies/jquery-sortable.js"></script>
         <script src="js/dependencies/locationpicker.jquery.min.js"></script>
         <script src="js/epihack/admin.js"></script>
         <!--SCRIPTS END-->
   <script>
       $("#menu-toggle").click(function (e) {
           e.preventDefault();
           $("#wrapper").toggleClass("toggled");
       });
       var page = '<%=page%>';
   </script>
  </body>
</html>
